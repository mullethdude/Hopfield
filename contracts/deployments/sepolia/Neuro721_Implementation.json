{
  "address": "0x4de5649e33bad507c496fa3c82b784900ea18cde",
  "txHash": "0xbff9bb4d9986e16e96f1550c88451b637b4ce93f80e407006ba4470af5d491fc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "initialPrefix",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approveFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numbneuro",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "astatembly",
          "type": "uint256"
        }
      ],
      "name": "initneural",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "num",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "initialPrefix",
          "type": "string"
        }
      ],
      "name": "postUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAllFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "id",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numbneuro",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "astatembly",
          "type": "uint256"
        }
      ],
      "name": "test",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numbneuro",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "astatembly",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pat2",
          "type": "uint256"
        }
      ],
      "name": "trainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "contractName": "Neuro721",
  "sourceName": "src/Neuro721.sol",
  "bytecode": "0x608060405234801562000010575f80fd5b5060405162004eaf38038062004eaf8339818101604052810190620000369190620002ce565b62000047816200004e60201b60201c565b5062000638565b5f6200005f6200012160201b60201c565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000d25773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103556200010b565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200010a575f80fd5b5b81600590816200011c919062000554565b505050565b5f7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b620001aa8262000162565b810181811067ffffffffffffffff82111715620001cc57620001cb62000172565b5b80604052505050565b5f620001e062000149565b9050620001ee82826200019f565b919050565b5f67ffffffffffffffff82111562000210576200020f62000172565b5b6200021b8262000162565b9050602081019050919050565b5f5b83811015620002475780820151818401526020810190506200022a565b5f8484015250505050565b5f620002686200026284620001f3565b620001d5565b9050828152602081018484840111156200028757620002866200015e565b5b6200029484828562000228565b509392505050565b5f82601f830112620002b357620002b26200015a565b5b8151620002c584826020860162000252565b91505092915050565b5f60208284031215620002e657620002e562000152565b5b5f82015167ffffffffffffffff81111562000306576200030562000156565b5b62000314848285016200029c565b91505092915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200036c57607f821691505b60208210810362000382576200038162000327565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620003e67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620003a9565b620003f28683620003a9565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6200043c6200043662000430846200040a565b62000413565b6200040a565b9050919050565b5f819050919050565b62000457836200041c565b6200046f620004668262000443565b848454620003b5565b825550505050565b5f90565b6200048562000477565b620004928184846200044c565b505050565b5b81811015620004b957620004ad5f826200047b565b60018101905062000498565b5050565b601f8211156200050857620004d28162000388565b620004dd846200039a565b81016020851015620004ed578190505b62000505620004fc856200039a565b83018262000497565b50505b505050565b5f82821c905092915050565b5f6200052a5f19846008026200050d565b1980831691505092915050565b5f62000544838362000519565b9150826002028217905092915050565b6200055f826200031d565b67ffffffffffffffff8111156200057b576200057a62000172565b5b62000587825462000354565b62000594828285620004bd565b5f60209050601f831160018114620005ca575f8415620005b5578287015190505b620005c1858262000537565b86555062000630565b601f198416620005da8662000388565b5f5b828110156200060357848901518255600182019150602085019450602081019050620005dc565b868310156200062357848901516200061f601f89168262000519565b8355505b6001600288020188555050505b505050505050565b61486980620006465f395ff3fe608060405234801561000f575f80fd5b5060043610610156575f3560e01c806370a08231116100c1578063b1441ce61161007a578063b1441ce6146103a6578063b88d4fde146103c2578063c87b56dd146103de578063e985e9c51461040e578063eb8ac9211461043e578063eeb5a5d11461045a57610156565b806370a08231146102e857806379cc6790146103185780638cb8a0f71461033457806395d89b4114610350578063a0712d681461036e578063a22cb4651461038a57610156565b806328cfbd461161011357806328cfbd461461022c5780632b991746146102485780632bb0b3041461026457806342842e0e1461028057806342966c681461029c5780636352211e146102b857610156565b806301ffc9a71461015a57806306fdde031461018a578063081812fc146101a8578063095ea7b3146101d857806315ddc535146101f457806323b872dd14610210575b5f80fd5b610174600480360381019061016f9190612ea6565b610476565b6040516101819190612eeb565b60405180910390f35b610192610507565b60405161019f9190612f8e565b60405180910390f35b6101c260048036038101906101bd9190612fe1565b610544565b6040516101cf919061304b565b60405180910390f35b6101f260048036038101906101ed919061308e565b61060d565b005b61020e60048036038101906102099190613182565b6107a7565b005b61022a60048036038101906102259190613225565b61083f565b005b61024660048036038101906102419190613182565b6108f2565b005b610262600480360381019061025d9190613225565b61098b565b005b61027e60048036038101906102799190613275565b610b8f565b005b61029a60048036038101906102959190613225565b610c50565b005b6102b660048036038101906102b19190612fe1565b610c6f565b005b6102d260048036038101906102cd9190612fe1565b610c85565b6040516102df919061304b565b60405180910390f35b61030260048036038101906102fd91906132b3565b610d04565b60405161030f91906132ed565b60405180910390f35b610332600480360381019061032d919061308e565b610db7565b005b61034e60048036038101906103499190613306565b610fae565b005b61035861135e565b6040516103659190612f8e565b60405180910390f35b61038860048036038101906103839190612fe1565b61139b565b005b6103a4600480360381019061039f9190613380565b611454565b005b6103c060048036038101906103bb91906134e6565b611463565b005b6103dc60048036038101906103d791906135cb565b611529565b005b6103f860048036038101906103f39190612fe1565b6115b6565b6040516104059190612f8e565b60405180910390f35b6104286004803603810190610423919061364b565b6116d2565b6040516104359190612eeb565b60405180910390f35b61045860048036038101906104539190613275565b611760565b005b610474600480360381019061046f9190613689565b611977565b005b5f6301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104d057506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105005750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60606040518060400160405280600881526020017f486f706669656c64000000000000000000000000000000000000000000000000815250905090565b5f805f61055084611a63565b915091505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036105c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b990613723565b60405180910390fd5b80156106025760035f8581526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692505050610608565b5f925050505b919050565b5f60015f61061a84611ae3565b81526020019081526020015f205490505f8190505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361069c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069390613723565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610757575060025f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff165b610796576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078d9061378b565b60405180910390fd5b6107a1828585611aec565b50505050565b61083786868686808060200260200160405190810160405280939291908181526020018383602002808284375f81840152601f19601f8201169050808301925050505050505085858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050505f611bf2565b505050505050565b61084a8383836120ef565b6108558383836123b6565b6108748273ffffffffffffffffffffffffffffffffffffffff166124dd565b801561088d575061088c82635e8bf64460e01b6124ff565b5b156108ed576108ad3384848460405180602001604052805f8152506125c0565b6108ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e3906137f3565b60405180910390fd5b5b505050565b61098386868686808060200260200160405190810160405280939291908181526020018383602002808284375f81840152601f19601f8201169050808301925050505050505085858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050506001611bf2565b505050505050565b5f60015f61099884611ae3565b81526020019081526020015f205490505f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610a16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0d9061385b565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610ad1575060025f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff165b610b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b079061378b565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610b7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b75906138c3565b60405180910390fd5b610b89818484611aec565b50505050565b610b97612e1d565b5f5b83811015610c4a575f60018285901c1690505f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff905060018203610bdc57600190505b80848460198110610bf057610bef6138e1565b5b6020020181815250508060065f600186610c0a919061393b565b81526020019081526020015f205f81548110610c2957610c286138e1565b5b905f5260205f20018190555050508080610c429061396e565b915050610b99565b50505050565b610c6a83838360405180602001604052805f815250611529565b505050565b610c8233610c7c83612697565b836126e6565b50565b5f610c8f82612697565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf6906139ff565b60405180910390fd5b919050565b5f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6a90613a67565b60405180910390fd5b5f808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1c90613acf565b60405180910390fd5b5f80610e3083611a63565b915091508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610ed25750808015610ed157503373ffffffffffffffffffffffffffffffffffffffff1660035f8581526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b5b80610f5e575060025f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff165b610f9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9490613b37565b60405180910390fd5b610fa88483856126e6565b50505050565b610fb6612e1d565b610fbe612e1d565b5f5b858110156110a7575f60018287901c1690505f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90506001820361100357600190505b80858460198110611017576110166138e1565b5b60200201818152505060018387901c16915060018203611054576001848460198110611046576110456138e1565b5b602002018181525050611092565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848460198110611088576110876138e1565b5b6020020181815250505b5050808061109f9061396e565b915050610fc0565b505f600a90505f805b6002811015611354575f5b88811015611340575f92505f6001826110d4919061393b565b90505b898110156111ee57808203156111db5760028682601981106110fc576110fb6138e1565b5b6020020151878460198110611114576111136138e1565b5b60200201516111239190613b5e565b888360198110611136576111356138e1565b5b602002015189856019811061114e5761114d6138e1565b5b602002015161115d9190613b5e565b6111679190613bd4565b6111719190613c42565b60075f8481526020019081526020015f205f8381526020019081526020015f208190555060075f8381526020019081526020015f205f8281526020019081526020015f205460075f8381526020019081526020015f205f8481526020019081526020015f20819055505b80806111e69061396e565b9150506110d7565b505f5b8981101561128557808203156112725760065f600184611211919061393b565b81526020019081526020015f205f815481106112305761122f6138e1565b5b905f5260205f20015460075f8481526020019081526020015f205f8381526020019081526020015f20546112649190613b5e565b8461126f9190613bd4565b93505b808061127d9061396e565b9150506111f1565b505f83121561132d5760065f60018361129e919061393b565b81526020019081526020015f205f815481106112bd576112bc6138e1565b5b905f5260205f2001547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6112f19190613b5e565b60065f600184611301919061393b565b81526020019081526020015f205f815481106113205761131f6138e1565b5b905f5260205f2001819055505b80806113389061396e565b9150506110bb565b50808061134c9061396e565b9150506110b0565b5050505050505050565b60606040518060400160405280600381526020017f48666e0000000000000000000000000000000000000000000000000000000000815250905090565b5f60045490505f5b828110156113d65781806113b69061396e565b9250506113c3338361287e565b80806113ce9061396e565b9150506113a3565b505f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505f6002426114099190613caa565b0361141357600190505b60065f8381526020019081526020015f2081908060018154018082558091505060019003905f5260205f20015f909190919091505581600481905550505050565b61145f3383836129ba565b5050565b5f61146c612ab3565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036114dd5773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355611515565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611514575f80fd5b5b81600590816115249190613ed4565b505050565b6115348484846120ef565b61153f8484846123b6565b61155e8373ffffffffffffffffffffffffffffffffffffffff166124dd565b156115b05761157033858585856125c0565b6115af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a6906137f3565b60405180910390fd5b5b50505050565b60605f6115c283612adb565b90505f600167ffffffffffffffff8111156115e0576115df6133c2565b5b6040519080825280601f01601f1916602001820160405280156116125781602001600182028036833780820191505090505b509050602d60f81b815f8151811061162d5761162c6138e1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053505f60405180602001604052805f81525090505f60065f8781526020019081526020015f205f81548110611691576116906138e1565b5b905f5260205f20015412156116a4578190505b8283826040516020016116b993929190614105565b6040516020818303038152906040529350505050919050565b5f60025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b611768612e1d565b5f805b848110156117e0575f60018286901c1690505f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050600182036117ae57600190505b808584601981106117c2576117c16138e1565b5b602002018181525050505080806117d89061396e565b91505061176b565b505f5b60018110156118ff575f5b858110156118eb575f92505f5b8681101561186f578082031561185c5784826019811061181e5761181d6138e1565b5b602002015160075f8481526020019081526020015f205f8381526020019081526020015f205461184e9190613b5e565b846118599190613bd4565b93505b80806118679061396e565b9150506117fb565b505f8312156118d85783816019811061188b5761188a6138e1565b5b60200201517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6118bb9190613b5e565b8482601981106118ce576118cd6138e1565b5b6020020181815250505b80806118e39061396e565b9150506117ee565b5080806118f79061396e565b9150506117e3565b505f5b848110156119705782816019811061191d5761191c6138e1565b5b602002015160065f600184611932919061393b565b81526020019081526020015f205f81548110611951576119506138e1565b5b905f5260205f20018190555080806119689061396e565b915050611902565b5050505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036119e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119dc906141ab565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4a90614213565b60405180910390fd5b611a5e8383836129ba565b505050565b5f805f60015f611a7286611ae3565b81526020019081526020015f205490507401000000000000000000000000000000000000000080821603611aa8575f9250611aac565b8092505b60017f800000000000000000000000000000000000000000000000000000000000000082611ada9190614231565b14915050915091565b5f819050919050565b5f8390505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611b3457611b2f8285835f612c34565b611b91565b611b418285836001612c34565b8260035f8481526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a450505050565b5f8573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611cae575060025f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff165b90505f73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1603611d1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1590613acf565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603611d8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d83906142ab565b60405180910390fd5b5f845190505f5b81811015611f7b575f868281518110611daf57611dae6138e1565b5b602002602001015190505f80611dc483611a63565b915091508a73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611e36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2d90614313565b60405180910390fd5b8580611ea65750808015611ea557503373ffffffffffffffffffffffffffffffffffffffff1660035f8581526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b5b611ee5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611edc9061437b565b60405180910390fd5b611f0a8360015f611ef587611ae3565b81526020019081526020015f20548c5f612c34565b828a73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050508080611f739061396e565b915050611d93565b508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161461205457805f808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254611ffa9190614399565b92505081905550805f808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825461204c919061393b565b925050819055505b6120738673ffffffffffffffffffffffffffffffffffffffff166124dd565b801561209457508280612093575061209286635e8bf64460e01b6124ff565b5b5b156120e6576120a63388888888612d46565b6120e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120dc90614416565b60405180910390fd5b5b50505050505050565b5f806120fa83611a63565b915091505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361216c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216390613723565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146121da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d19061447e565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612248576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223f906142ab565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146123af5760025f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff168061236f575080801561236e57503373ffffffffffffffffffffffffffffffffffffffff1660035f8581526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b5b6123ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a5906144e6565b60405180910390fd5b5b5050505050565b5f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f81548092919061240290614504565b91905055505f808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8154809291906124539061396e565b919050555061247d8160015f61246885611ae3565b81526020019081526020015f2054845f612c34565b808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5f805f806301ffc9a760e01b8560405160240161251c919061453a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090508060200181516040515f815260208183858c612710fa955080519450505050609e5a116125ab576125aa614553565b5b8280156125b55750815b935050505092915050565b5f808473ffffffffffffffffffffffffffffffffffffffff1663150b7a02888887876040518563ffffffff1660e01b815260040161260194939291906145d2565b6020604051808303815f875af115801561261d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906126419190614630565b905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505095945050505050565b5f8060015f6126a585611ae3565b81526020019081526020015f2054905074010000000000000000000000000000000000000000808216036126dc575f9150506126e1565b809150505b919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161274b906146a5565b60405180910390fd5b5f61275e82611ae3565b90507401000000000000000000000000000000000000000060017f80000000000000000000000000000000000000000000000000000000000000006127a39190614399565b60015f8481526020019081526020015f2054161760015f8381526020019081526020015f20819055505f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f81548092919061281890614504565b9190505550815f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b5f61288882611ae3565b90505f60015f8381526020019081526020015f2054146128dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128d49061470d565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1660015f8381526020019081526020015f20819055505f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8154809291906129559061396e565b9190505550818373ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b8060025f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612aa69190612eeb565b60405180910390a3505050565b5f7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b60605f8203612b21576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612c2f565b5f8290505f5b5f8214612b4f578080600101915050600a8281612b4757612b46613c15565b5b049150612b27565b5f8167ffffffffffffffff811115612b6a57612b696133c2565b5b6040519080825280601f01601f191660200182016040528015612b9c5781602001600182028036833780820191505090505b5090505f6001830390505b5f8614612c2757600a8681612bbf57612bbe613c15565b5b0660300160f81b82828060019003935081518110612be057612bdf6138e1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350600a8681612c1f57612c1e613c15565b5b049550612ba7565b819450505050505b919050565b8015612cb9578173ffffffffffffffffffffffffffffffffffffffff167f80000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffff00000000000000000000000000000000000000008516171760015f612ca387611ae3565b81526020019081526020015f2081905550612d40565b8173ffffffffffffffffffffffffffffffffffffffff1660017f8000000000000000000000000000000000000000000000000000000000000000612cfd9190614399565b7fffffffffffffffffffffffff00000000000000000000000000000000000000008516161760015f612d2e87611ae3565b81526020019081526020015f20819055505b50505050565b5f808473ffffffffffffffffffffffffffffffffffffffff16634b808c46888887876040518563ffffffff1660e01b8152600401612d8794939291906147e2565b6020604051808303815f875af1158015612da3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612dc79190614630565b9050634b808c4660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505095945050505050565b604051806103200160405280601990602082028036833780820191505090505090565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612e8581612e51565b8114612e8f575f80fd5b50565b5f81359050612ea081612e7c565b92915050565b5f60208284031215612ebb57612eba612e49565b5b5f612ec884828501612e92565b91505092915050565b5f8115159050919050565b612ee581612ed1565b82525050565b5f602082019050612efe5f830184612edc565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015612f3b578082015181840152602081019050612f20565b5f8484015250505050565b5f601f19601f8301169050919050565b5f612f6082612f04565b612f6a8185612f0e565b9350612f7a818560208601612f1e565b612f8381612f46565b840191505092915050565b5f6020820190508181035f830152612fa68184612f56565b905092915050565b5f819050919050565b612fc081612fae565b8114612fca575f80fd5b50565b5f81359050612fdb81612fb7565b92915050565b5f60208284031215612ff657612ff5612e49565b5b5f61300384828501612fcd565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6130358261300c565b9050919050565b6130458161302b565b82525050565b5f60208201905061305e5f83018461303c565b92915050565b61306d8161302b565b8114613077575f80fd5b50565b5f8135905061308881613064565b92915050565b5f80604083850312156130a4576130a3612e49565b5b5f6130b18582860161307a565b92505060206130c285828601612fcd565b9150509250929050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f8401126130ed576130ec6130cc565b5b8235905067ffffffffffffffff81111561310a576131096130d0565b5b602083019150836020820283011115613126576131256130d4565b5b9250929050565b5f8083601f840112613142576131416130cc565b5b8235905067ffffffffffffffff81111561315f5761315e6130d0565b5b60208301915083600182028301111561317b5761317a6130d4565b5b9250929050565b5f805f805f806080878903121561319c5761319b612e49565b5b5f6131a989828a0161307a565b96505060206131ba89828a0161307a565b955050604087013567ffffffffffffffff8111156131db576131da612e4d565b5b6131e789828a016130d8565b9450945050606087013567ffffffffffffffff81111561320a57613209612e4d565b5b61321689828a0161312d565b92509250509295509295509295565b5f805f6060848603121561323c5761323b612e49565b5b5f6132498682870161307a565b935050602061325a8682870161307a565b925050604061326b86828701612fcd565b9150509250925092565b5f806040838503121561328b5761328a612e49565b5b5f61329885828601612fcd565b92505060206132a985828601612fcd565b9150509250929050565b5f602082840312156132c8576132c7612e49565b5b5f6132d58482850161307a565b91505092915050565b6132e781612fae565b82525050565b5f6020820190506133005f8301846132de565b92915050565b5f805f6060848603121561331d5761331c612e49565b5b5f61332a86828701612fcd565b935050602061333b86828701612fcd565b925050604061334c86828701612fcd565b9150509250925092565b61335f81612ed1565b8114613369575f80fd5b50565b5f8135905061337a81613356565b92915050565b5f806040838503121561339657613395612e49565b5b5f6133a38582860161307a565b92505060206133b48582860161336c565b9150509250929050565b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6133f882612f46565b810181811067ffffffffffffffff82111715613417576134166133c2565b5b80604052505050565b5f613429612e40565b905061343582826133ef565b919050565b5f67ffffffffffffffff821115613454576134536133c2565b5b61345d82612f46565b9050602081019050919050565b828183375f83830152505050565b5f61348a6134858461343a565b613420565b9050828152602081018484840111156134a6576134a56133be565b5b6134b184828561346a565b509392505050565b5f82601f8301126134cd576134cc6130cc565b5b81356134dd848260208601613478565b91505092915050565b5f602082840312156134fb576134fa612e49565b5b5f82013567ffffffffffffffff81111561351857613517612e4d565b5b613524848285016134b9565b91505092915050565b5f67ffffffffffffffff821115613547576135466133c2565b5b61355082612f46565b9050602081019050919050565b5f61356f61356a8461352d565b613420565b90508281526020810184848401111561358b5761358a6133be565b5b61359684828561346a565b509392505050565b5f82601f8301126135b2576135b16130cc565b5b81356135c284826020860161355d565b91505092915050565b5f805f80608085870312156135e3576135e2612e49565b5b5f6135f08782880161307a565b94505060206136018782880161307a565b935050604061361287828801612fcd565b925050606085013567ffffffffffffffff81111561363357613632612e4d565b5b61363f8782880161359e565b91505092959194509250565b5f806040838503121561366157613660612e49565b5b5f61366e8582860161307a565b925050602061367f8582860161307a565b9150509250929050565b5f805f606084860312156136a05761369f612e49565b5b5f6136ad8682870161307a565b93505060206136be8682870161307a565b92505060406136cf8682870161336c565b9150509250925092565b7f4e4f4e4558495354454e545f544f4b454e0000000000000000000000000000005f82015250565b5f61370d601183612f0e565b9150613718826136d9565b602082019050919050565b5f6020820190508181035f83015261373a81613701565b9050919050565b7f554e415554484f52495a45445f415050524f56414c00000000000000000000005f82015250565b5f613775601583612f0e565b915061378082613741565b602082019050919050565b5f6020820190508181035f8301526137a281613769565b9050919050565b7f4552433732315f5452414e534645525f52454a454354454400000000000000005f82015250565b5f6137dd601883612f0e565b91506137e8826137a9565b602082019050919050565b5f6020820190508181035f83015261380a816137d1565b9050919050565b7f5a45524f5f414444524553535f53454e444552000000000000000000000000005f82015250565b5f613845601383612f0e565b915061385082613811565b602082019050919050565b5f6020820190508181035f83015261387281613839565b9050919050565b7f4f574e45525f4e4f545f53454e444552000000000000000000000000000000005f82015250565b5f6138ad601083612f0e565b91506138b882613879565b602082019050919050565b5f6020820190508181035f8301526138da816138a1565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61394582612fae565b915061395083612fae565b92508282019050808211156139685761396761390e565b5b92915050565b5f61397882612fae565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036139aa576139a961390e565b5b600182019050919050565b7f4e4f4e4558495354414e545f544f4b454e0000000000000000000000000000005f82015250565b5f6139e9601183612f0e565b91506139f4826139b5565b602082019050919050565b5f6020820190508181035f830152613a16816139dd565b9050919050565b7f5a45524f5f414444524553535f4f574e455200000000000000000000000000005f82015250565b5f613a51601283612f0e565b9150613a5c82613a1d565b602082019050919050565b5f6020820190508181035f830152613a7e81613a45565b9050919050565b7f4e4f545f46524f4d5f5a45524f414444524553530000000000000000000000005f82015250565b5f613ab9601483612f0e565b9150613ac482613a85565b602082019050919050565b5f6020820190508181035f830152613ae681613aad565b9050919050565b7f554e415554484f52495a45445f4255524e0000000000000000000000000000005f82015250565b5f613b21601183612f0e565b9150613b2c82613aed565b602082019050919050565b5f6020820190508181035f830152613b4e81613b15565b9050919050565b5f819050919050565b5f613b6882613b55565b9150613b7383613b55565b9250828202613b8181613b55565b91507f800000000000000000000000000000000000000000000000000000000000000084145f84121615613bb857613bb761390e565b5b8282058414831517613bcd57613bcc61390e565b5b5092915050565b5f613bde82613b55565b9150613be983613b55565b92508282019050828112155f8312168382125f841215161715613c0f57613c0e61390e565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f613c4c82613b55565b9150613c5783613b55565b925082613c6757613c66613c15565b5b60015f0383147f800000000000000000000000000000000000000000000000000000000000000083141615613c9f57613c9e61390e565b5b828205905092915050565b5f613cb482612fae565b9150613cbf83612fae565b925082613ccf57613cce613c15565b5b828206905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680613d1e57607f821691505b602082108103613d3157613d30613cda565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302613d937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613d58565b613d9d8683613d58565b95508019841693508086168417925050509392505050565b5f819050919050565b5f613dd8613dd3613dce84612fae565b613db5565b612fae565b9050919050565b5f819050919050565b613df183613dbe565b613e05613dfd82613ddf565b848454613d64565b825550505050565b5f90565b613e19613e0d565b613e24818484613de8565b505050565b5b81811015613e4757613e3c5f82613e11565b600181019050613e2a565b5050565b601f821115613e8c57613e5d81613d37565b613e6684613d49565b81016020851015613e75578190505b613e89613e8185613d49565b830182613e29565b50505b505050565b5f82821c905092915050565b5f613eac5f1984600802613e91565b1980831691505092915050565b5f613ec48383613e9d565b9150826002028217905092915050565b613edd82612f04565b67ffffffffffffffff811115613ef657613ef56133c2565b5b613f008254613d07565b613f0b828285613e4b565b5f60209050601f831160018114613f3c575f8415613f2a578287015190505b613f348582613eb9565b865550613f9b565b601f198416613f4a86613d37565b5f5b82811015613f7157848901518255600182019150602085019450602081019050613f4c565b86831015613f8e5784890151613f8a601f891682613e9d565b8355505b6001600288020188555050505b505050505050565b5f81905092915050565b7f646174613a746578742f706c61696e2c7b226e616d65223a22546f6b656e20005f82015250565b5f613fe1601f83613fa3565b9150613fec82613fad565b601f82019050919050565b5f61400182612f04565b61400b8185613fa3565b935061401b818560208601612f1e565b80840191505092915050565b7f222c226465736372697074696f6e223a220000000000000000000000000000005f82015250565b5f61405b601183613fa3565b915061406682614027565b601182019050919050565b7f222c227374617465223a000000000000000000000000000000000000000000005f82015250565b5f6140a5600a83613fa3565b91506140b082614071565b600a82019050919050565b7f317d0000000000000000000000000000000000000000000000000000000000005f82015250565b5f6140ef600283613fa3565b91506140fa826140bb565b600282019050919050565b5f61410f82613fd5565b915061411b8286613ff7565b91506141268261404f565b91506141328285613ff7565b915061413d82614099565b91506141498284613ff7565b9150614154826140e3565b9150819050949350505050565b7f496e76616c69642073656e6465722061646472657373000000000000000000005f82015250565b5f614195601683612f0e565b91506141a082614161565b602082019050919050565b5f6020820190508181035f8301526141c281614189565b9050919050565b7f554e415554484f52495a45445f415050524f56455f464f525f414c4c000000005f82015250565b5f6141fd601c83612f0e565b9150614208826141c9565b602082019050919050565b5f6020820190508181035f83015261422a816141f1565b9050919050565b5f61423b82612fae565b915061424683612fae565b92508261425657614255613c15565b5b828204905092915050565b7f4e4f545f544f5f5a45524f4144445245535300000000000000000000000000005f82015250565b5f614295601283612f0e565b91506142a082614261565b602082019050919050565b5f6020820190508181035f8301526142c281614289565b9050919050565b7f42415443485452414e5346455246524f4d5f4e4f545f4f574e455200000000005f82015250565b5f6142fd601b83612f0e565b9150614308826142c9565b602082019050919050565b5f6020820190508181035f83015261432a816142f1565b9050919050565b7f4e4f545f415554484f52495a45440000000000000000000000000000000000005f82015250565b5f614365600e83612f0e565b915061437082614331565b602082019050919050565b5f6020820190508181035f83015261439281614359565b9050919050565b5f6143a382612fae565b91506143ae83612fae565b92508282039050818111156143c6576143c561390e565b5b92915050565b7f4552433732315f42415443485f5452414e534645525f52454a454354454400005f82015250565b5f614400601e83612f0e565b915061440b826143cc565b602082019050919050565b5f6020820190508181035f83015261442d816143f4565b9050919050565b7f434845434b5452414e534645525f4e4f545f4f574e45520000000000000000005f82015250565b5f614468601783612f0e565b915061447382614434565b602082019050919050565b5f6020820190508181035f8301526144958161445c565b9050919050565b7f554e415554484f52495a45445f5452414e5346455200000000000000000000005f82015250565b5f6144d0601583612f0e565b91506144db8261449c565b602082019050919050565b5f6020820190508181035f8301526144fd816144c4565b9050919050565b5f61450e82612fae565b91505f82036145205761451f61390e565b5b600182039050919050565b61453481612e51565b82525050565b5f60208201905061454d5f83018461452b565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52600160045260245ffd5b5f81519050919050565b5f82825260208201905092915050565b5f6145a482614580565b6145ae818561458a565b93506145be818560208601612f1e565b6145c781612f46565b840191505092915050565b5f6080820190506145e55f83018761303c565b6145f2602083018661303c565b6145ff60408301856132de565b8181036060830152614611818461459a565b905095945050505050565b5f8151905061462a81612e7c565b92915050565b5f6020828403121561464557614644612e49565b5b5f6146528482850161461c565b91505092915050565b7f4e4f545f4f574e455200000000000000000000000000000000000000000000005f82015250565b5f61468f600983612f0e565b915061469a8261465b565b602082019050919050565b5f6020820190508181035f8301526146bc81614683565b9050919050565b7f414c52454144595f4d494e5445440000000000000000000000000000000000005f82015250565b5f6146f7600e83612f0e565b9150614702826146c3565b602082019050919050565b5f6020820190508181035f830152614724816146eb565b9050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61475d81612fae565b82525050565b5f61476e8383614754565b60208301905092915050565b5f602082019050919050565b5f6147908261472b565b61479a8185614735565b93506147a583614745565b805f5b838110156147d55781516147bc8882614763565b97506147c78361477a565b9250506001810190506147a8565b5085935050505092915050565b5f6080820190506147f55f83018761303c565b614802602083018661303c565b81810360408301526148148185614786565b90508181036060830152614828818461459a565b90509594505050505056fea26469706673582212201379fcb52741d2562c023dcc84788859137f2d256573b6272841efa7c00fa10e64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b5060043610610156575f3560e01c806370a08231116100c1578063b1441ce61161007a578063b1441ce6146103a6578063b88d4fde146103c2578063c87b56dd146103de578063e985e9c51461040e578063eb8ac9211461043e578063eeb5a5d11461045a57610156565b806370a08231146102e857806379cc6790146103185780638cb8a0f71461033457806395d89b4114610350578063a0712d681461036e578063a22cb4651461038a57610156565b806328cfbd461161011357806328cfbd461461022c5780632b991746146102485780632bb0b3041461026457806342842e0e1461028057806342966c681461029c5780636352211e146102b857610156565b806301ffc9a71461015a57806306fdde031461018a578063081812fc146101a8578063095ea7b3146101d857806315ddc535146101f457806323b872dd14610210575b5f80fd5b610174600480360381019061016f9190612ea6565b610476565b6040516101819190612eeb565b60405180910390f35b610192610507565b60405161019f9190612f8e565b60405180910390f35b6101c260048036038101906101bd9190612fe1565b610544565b6040516101cf919061304b565b60405180910390f35b6101f260048036038101906101ed919061308e565b61060d565b005b61020e60048036038101906102099190613182565b6107a7565b005b61022a60048036038101906102259190613225565b61083f565b005b61024660048036038101906102419190613182565b6108f2565b005b610262600480360381019061025d9190613225565b61098b565b005b61027e60048036038101906102799190613275565b610b8f565b005b61029a60048036038101906102959190613225565b610c50565b005b6102b660048036038101906102b19190612fe1565b610c6f565b005b6102d260048036038101906102cd9190612fe1565b610c85565b6040516102df919061304b565b60405180910390f35b61030260048036038101906102fd91906132b3565b610d04565b60405161030f91906132ed565b60405180910390f35b610332600480360381019061032d919061308e565b610db7565b005b61034e60048036038101906103499190613306565b610fae565b005b61035861135e565b6040516103659190612f8e565b60405180910390f35b61038860048036038101906103839190612fe1565b61139b565b005b6103a4600480360381019061039f9190613380565b611454565b005b6103c060048036038101906103bb91906134e6565b611463565b005b6103dc60048036038101906103d791906135cb565b611529565b005b6103f860048036038101906103f39190612fe1565b6115b6565b6040516104059190612f8e565b60405180910390f35b6104286004803603810190610423919061364b565b6116d2565b6040516104359190612eeb565b60405180910390f35b61045860048036038101906104539190613275565b611760565b005b610474600480360381019061046f9190613689565b611977565b005b5f6301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104d057506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105005750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60606040518060400160405280600881526020017f486f706669656c64000000000000000000000000000000000000000000000000815250905090565b5f805f61055084611a63565b915091505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036105c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b990613723565b60405180910390fd5b80156106025760035f8581526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692505050610608565b5f925050505b919050565b5f60015f61061a84611ae3565b81526020019081526020015f205490505f8190505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361069c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069390613723565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610757575060025f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff165b610796576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078d9061378b565b60405180910390fd5b6107a1828585611aec565b50505050565b61083786868686808060200260200160405190810160405280939291908181526020018383602002808284375f81840152601f19601f8201169050808301925050505050505085858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050505f611bf2565b505050505050565b61084a8383836120ef565b6108558383836123b6565b6108748273ffffffffffffffffffffffffffffffffffffffff166124dd565b801561088d575061088c82635e8bf64460e01b6124ff565b5b156108ed576108ad3384848460405180602001604052805f8152506125c0565b6108ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e3906137f3565b60405180910390fd5b5b505050565b61098386868686808060200260200160405190810160405280939291908181526020018383602002808284375f81840152601f19601f8201169050808301925050505050505085858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050506001611bf2565b505050505050565b5f60015f61099884611ae3565b81526020019081526020015f205490505f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610a16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0d9061385b565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610ad1575060025f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff165b610b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b079061378b565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610b7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b75906138c3565b60405180910390fd5b610b89818484611aec565b50505050565b610b97612e1d565b5f5b83811015610c4a575f60018285901c1690505f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff905060018203610bdc57600190505b80848460198110610bf057610bef6138e1565b5b6020020181815250508060065f600186610c0a919061393b565b81526020019081526020015f205f81548110610c2957610c286138e1565b5b905f5260205f20018190555050508080610c429061396e565b915050610b99565b50505050565b610c6a83838360405180602001604052805f815250611529565b505050565b610c8233610c7c83612697565b836126e6565b50565b5f610c8f82612697565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf6906139ff565b60405180910390fd5b919050565b5f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6a90613a67565b60405180910390fd5b5f808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1c90613acf565b60405180910390fd5b5f80610e3083611a63565b915091508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610ed25750808015610ed157503373ffffffffffffffffffffffffffffffffffffffff1660035f8581526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b5b80610f5e575060025f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff165b610f9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9490613b37565b60405180910390fd5b610fa88483856126e6565b50505050565b610fb6612e1d565b610fbe612e1d565b5f5b858110156110a7575f60018287901c1690505f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90506001820361100357600190505b80858460198110611017576110166138e1565b5b60200201818152505060018387901c16915060018203611054576001848460198110611046576110456138e1565b5b602002018181525050611092565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848460198110611088576110876138e1565b5b6020020181815250505b5050808061109f9061396e565b915050610fc0565b505f600a90505f805b6002811015611354575f5b88811015611340575f92505f6001826110d4919061393b565b90505b898110156111ee57808203156111db5760028682601981106110fc576110fb6138e1565b5b6020020151878460198110611114576111136138e1565b5b60200201516111239190613b5e565b888360198110611136576111356138e1565b5b602002015189856019811061114e5761114d6138e1565b5b602002015161115d9190613b5e565b6111679190613bd4565b6111719190613c42565b60075f8481526020019081526020015f205f8381526020019081526020015f208190555060075f8381526020019081526020015f205f8281526020019081526020015f205460075f8381526020019081526020015f205f8481526020019081526020015f20819055505b80806111e69061396e565b9150506110d7565b505f5b8981101561128557808203156112725760065f600184611211919061393b565b81526020019081526020015f205f815481106112305761122f6138e1565b5b905f5260205f20015460075f8481526020019081526020015f205f8381526020019081526020015f20546112649190613b5e565b8461126f9190613bd4565b93505b808061127d9061396e565b9150506111f1565b505f83121561132d5760065f60018361129e919061393b565b81526020019081526020015f205f815481106112bd576112bc6138e1565b5b905f5260205f2001547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6112f19190613b5e565b60065f600184611301919061393b565b81526020019081526020015f205f815481106113205761131f6138e1565b5b905f5260205f2001819055505b80806113389061396e565b9150506110bb565b50808061134c9061396e565b9150506110b0565b5050505050505050565b60606040518060400160405280600381526020017f48666e0000000000000000000000000000000000000000000000000000000000815250905090565b5f60045490505f5b828110156113d65781806113b69061396e565b9250506113c3338361287e565b80806113ce9061396e565b9150506113a3565b505f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505f6002426114099190613caa565b0361141357600190505b60065f8381526020019081526020015f2081908060018154018082558091505060019003905f5260205f20015f909190919091505581600481905550505050565b61145f3383836129ba565b5050565b5f61146c612ab3565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036114dd5773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355611515565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611514575f80fd5b5b81600590816115249190613ed4565b505050565b6115348484846120ef565b61153f8484846123b6565b61155e8373ffffffffffffffffffffffffffffffffffffffff166124dd565b156115b05761157033858585856125c0565b6115af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a6906137f3565b60405180910390fd5b5b50505050565b60605f6115c283612adb565b90505f600167ffffffffffffffff8111156115e0576115df6133c2565b5b6040519080825280601f01601f1916602001820160405280156116125781602001600182028036833780820191505090505b509050602d60f81b815f8151811061162d5761162c6138e1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053505f60405180602001604052805f81525090505f60065f8781526020019081526020015f205f81548110611691576116906138e1565b5b905f5260205f20015412156116a4578190505b8283826040516020016116b993929190614105565b6040516020818303038152906040529350505050919050565b5f60025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b611768612e1d565b5f805b848110156117e0575f60018286901c1690505f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050600182036117ae57600190505b808584601981106117c2576117c16138e1565b5b602002018181525050505080806117d89061396e565b91505061176b565b505f5b60018110156118ff575f5b858110156118eb575f92505f5b8681101561186f578082031561185c5784826019811061181e5761181d6138e1565b5b602002015160075f8481526020019081526020015f205f8381526020019081526020015f205461184e9190613b5e565b846118599190613bd4565b93505b80806118679061396e565b9150506117fb565b505f8312156118d85783816019811061188b5761188a6138e1565b5b60200201517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6118bb9190613b5e565b8482601981106118ce576118cd6138e1565b5b6020020181815250505b80806118e39061396e565b9150506117ee565b5080806118f79061396e565b9150506117e3565b505f5b848110156119705782816019811061191d5761191c6138e1565b5b602002015160065f600184611932919061393b565b81526020019081526020015f205f81548110611951576119506138e1565b5b905f5260205f20018190555080806119689061396e565b915050611902565b5050505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036119e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119dc906141ab565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4a90614213565b60405180910390fd5b611a5e8383836129ba565b505050565b5f805f60015f611a7286611ae3565b81526020019081526020015f205490507401000000000000000000000000000000000000000080821603611aa8575f9250611aac565b8092505b60017f800000000000000000000000000000000000000000000000000000000000000082611ada9190614231565b14915050915091565b5f819050919050565b5f8390505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611b3457611b2f8285835f612c34565b611b91565b611b418285836001612c34565b8260035f8481526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a450505050565b5f8573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611cae575060025f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff165b90505f73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1603611d1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1590613acf565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603611d8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d83906142ab565b60405180910390fd5b5f845190505f5b81811015611f7b575f868281518110611daf57611dae6138e1565b5b602002602001015190505f80611dc483611a63565b915091508a73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611e36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2d90614313565b60405180910390fd5b8580611ea65750808015611ea557503373ffffffffffffffffffffffffffffffffffffffff1660035f8581526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b5b611ee5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611edc9061437b565b60405180910390fd5b611f0a8360015f611ef587611ae3565b81526020019081526020015f20548c5f612c34565b828a73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050508080611f739061396e565b915050611d93565b508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161461205457805f808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254611ffa9190614399565b92505081905550805f808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825461204c919061393b565b925050819055505b6120738673ffffffffffffffffffffffffffffffffffffffff166124dd565b801561209457508280612093575061209286635e8bf64460e01b6124ff565b5b5b156120e6576120a63388888888612d46565b6120e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120dc90614416565b60405180910390fd5b5b50505050505050565b5f806120fa83611a63565b915091505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361216c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216390613723565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146121da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d19061447e565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612248576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223f906142ab565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146123af5760025f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff168061236f575080801561236e57503373ffffffffffffffffffffffffffffffffffffffff1660035f8581526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b5b6123ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a5906144e6565b60405180910390fd5b5b5050505050565b5f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f81548092919061240290614504565b91905055505f808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8154809291906124539061396e565b919050555061247d8160015f61246885611ae3565b81526020019081526020015f2054845f612c34565b808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5f805f806301ffc9a760e01b8560405160240161251c919061453a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090508060200181516040515f815260208183858c612710fa955080519450505050609e5a116125ab576125aa614553565b5b8280156125b55750815b935050505092915050565b5f808473ffffffffffffffffffffffffffffffffffffffff1663150b7a02888887876040518563ffffffff1660e01b815260040161260194939291906145d2565b6020604051808303815f875af115801561261d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906126419190614630565b905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505095945050505050565b5f8060015f6126a585611ae3565b81526020019081526020015f2054905074010000000000000000000000000000000000000000808216036126dc575f9150506126e1565b809150505b919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161274b906146a5565b60405180910390fd5b5f61275e82611ae3565b90507401000000000000000000000000000000000000000060017f80000000000000000000000000000000000000000000000000000000000000006127a39190614399565b60015f8481526020019081526020015f2054161760015f8381526020019081526020015f20819055505f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f81548092919061281890614504565b9190505550815f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b5f61288882611ae3565b90505f60015f8381526020019081526020015f2054146128dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128d49061470d565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1660015f8381526020019081526020015f20819055505f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8154809291906129559061396e565b9190505550818373ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b8060025f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612aa69190612eeb565b60405180910390a3505050565b5f7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b60605f8203612b21576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612c2f565b5f8290505f5b5f8214612b4f578080600101915050600a8281612b4757612b46613c15565b5b049150612b27565b5f8167ffffffffffffffff811115612b6a57612b696133c2565b5b6040519080825280601f01601f191660200182016040528015612b9c5781602001600182028036833780820191505090505b5090505f6001830390505b5f8614612c2757600a8681612bbf57612bbe613c15565b5b0660300160f81b82828060019003935081518110612be057612bdf6138e1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350600a8681612c1f57612c1e613c15565b5b049550612ba7565b819450505050505b919050565b8015612cb9578173ffffffffffffffffffffffffffffffffffffffff167f80000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffff00000000000000000000000000000000000000008516171760015f612ca387611ae3565b81526020019081526020015f2081905550612d40565b8173ffffffffffffffffffffffffffffffffffffffff1660017f8000000000000000000000000000000000000000000000000000000000000000612cfd9190614399565b7fffffffffffffffffffffffff00000000000000000000000000000000000000008516161760015f612d2e87611ae3565b81526020019081526020015f20819055505b50505050565b5f808473ffffffffffffffffffffffffffffffffffffffff16634b808c46888887876040518563ffffffff1660e01b8152600401612d8794939291906147e2565b6020604051808303815f875af1158015612da3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612dc79190614630565b9050634b808c4660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505095945050505050565b604051806103200160405280601990602082028036833780820191505090505090565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612e8581612e51565b8114612e8f575f80fd5b50565b5f81359050612ea081612e7c565b92915050565b5f60208284031215612ebb57612eba612e49565b5b5f612ec884828501612e92565b91505092915050565b5f8115159050919050565b612ee581612ed1565b82525050565b5f602082019050612efe5f830184612edc565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015612f3b578082015181840152602081019050612f20565b5f8484015250505050565b5f601f19601f8301169050919050565b5f612f6082612f04565b612f6a8185612f0e565b9350612f7a818560208601612f1e565b612f8381612f46565b840191505092915050565b5f6020820190508181035f830152612fa68184612f56565b905092915050565b5f819050919050565b612fc081612fae565b8114612fca575f80fd5b50565b5f81359050612fdb81612fb7565b92915050565b5f60208284031215612ff657612ff5612e49565b5b5f61300384828501612fcd565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6130358261300c565b9050919050565b6130458161302b565b82525050565b5f60208201905061305e5f83018461303c565b92915050565b61306d8161302b565b8114613077575f80fd5b50565b5f8135905061308881613064565b92915050565b5f80604083850312156130a4576130a3612e49565b5b5f6130b18582860161307a565b92505060206130c285828601612fcd565b9150509250929050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f8401126130ed576130ec6130cc565b5b8235905067ffffffffffffffff81111561310a576131096130d0565b5b602083019150836020820283011115613126576131256130d4565b5b9250929050565b5f8083601f840112613142576131416130cc565b5b8235905067ffffffffffffffff81111561315f5761315e6130d0565b5b60208301915083600182028301111561317b5761317a6130d4565b5b9250929050565b5f805f805f806080878903121561319c5761319b612e49565b5b5f6131a989828a0161307a565b96505060206131ba89828a0161307a565b955050604087013567ffffffffffffffff8111156131db576131da612e4d565b5b6131e789828a016130d8565b9450945050606087013567ffffffffffffffff81111561320a57613209612e4d565b5b61321689828a0161312d565b92509250509295509295509295565b5f805f6060848603121561323c5761323b612e49565b5b5f6132498682870161307a565b935050602061325a8682870161307a565b925050604061326b86828701612fcd565b9150509250925092565b5f806040838503121561328b5761328a612e49565b5b5f61329885828601612fcd565b92505060206132a985828601612fcd565b9150509250929050565b5f602082840312156132c8576132c7612e49565b5b5f6132d58482850161307a565b91505092915050565b6132e781612fae565b82525050565b5f6020820190506133005f8301846132de565b92915050565b5f805f6060848603121561331d5761331c612e49565b5b5f61332a86828701612fcd565b935050602061333b86828701612fcd565b925050604061334c86828701612fcd565b9150509250925092565b61335f81612ed1565b8114613369575f80fd5b50565b5f8135905061337a81613356565b92915050565b5f806040838503121561339657613395612e49565b5b5f6133a38582860161307a565b92505060206133b48582860161336c565b9150509250929050565b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6133f882612f46565b810181811067ffffffffffffffff82111715613417576134166133c2565b5b80604052505050565b5f613429612e40565b905061343582826133ef565b919050565b5f67ffffffffffffffff821115613454576134536133c2565b5b61345d82612f46565b9050602081019050919050565b828183375f83830152505050565b5f61348a6134858461343a565b613420565b9050828152602081018484840111156134a6576134a56133be565b5b6134b184828561346a565b509392505050565b5f82601f8301126134cd576134cc6130cc565b5b81356134dd848260208601613478565b91505092915050565b5f602082840312156134fb576134fa612e49565b5b5f82013567ffffffffffffffff81111561351857613517612e4d565b5b613524848285016134b9565b91505092915050565b5f67ffffffffffffffff821115613547576135466133c2565b5b61355082612f46565b9050602081019050919050565b5f61356f61356a8461352d565b613420565b90508281526020810184848401111561358b5761358a6133be565b5b61359684828561346a565b509392505050565b5f82601f8301126135b2576135b16130cc565b5b81356135c284826020860161355d565b91505092915050565b5f805f80608085870312156135e3576135e2612e49565b5b5f6135f08782880161307a565b94505060206136018782880161307a565b935050604061361287828801612fcd565b925050606085013567ffffffffffffffff81111561363357613632612e4d565b5b61363f8782880161359e565b91505092959194509250565b5f806040838503121561366157613660612e49565b5b5f61366e8582860161307a565b925050602061367f8582860161307a565b9150509250929050565b5f805f606084860312156136a05761369f612e49565b5b5f6136ad8682870161307a565b93505060206136be8682870161307a565b92505060406136cf8682870161336c565b9150509250925092565b7f4e4f4e4558495354454e545f544f4b454e0000000000000000000000000000005f82015250565b5f61370d601183612f0e565b9150613718826136d9565b602082019050919050565b5f6020820190508181035f83015261373a81613701565b9050919050565b7f554e415554484f52495a45445f415050524f56414c00000000000000000000005f82015250565b5f613775601583612f0e565b915061378082613741565b602082019050919050565b5f6020820190508181035f8301526137a281613769565b9050919050565b7f4552433732315f5452414e534645525f52454a454354454400000000000000005f82015250565b5f6137dd601883612f0e565b91506137e8826137a9565b602082019050919050565b5f6020820190508181035f83015261380a816137d1565b9050919050565b7f5a45524f5f414444524553535f53454e444552000000000000000000000000005f82015250565b5f613845601383612f0e565b915061385082613811565b602082019050919050565b5f6020820190508181035f83015261387281613839565b9050919050565b7f4f574e45525f4e4f545f53454e444552000000000000000000000000000000005f82015250565b5f6138ad601083612f0e565b91506138b882613879565b602082019050919050565b5f6020820190508181035f8301526138da816138a1565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61394582612fae565b915061395083612fae565b92508282019050808211156139685761396761390e565b5b92915050565b5f61397882612fae565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036139aa576139a961390e565b5b600182019050919050565b7f4e4f4e4558495354414e545f544f4b454e0000000000000000000000000000005f82015250565b5f6139e9601183612f0e565b91506139f4826139b5565b602082019050919050565b5f6020820190508181035f830152613a16816139dd565b9050919050565b7f5a45524f5f414444524553535f4f574e455200000000000000000000000000005f82015250565b5f613a51601283612f0e565b9150613a5c82613a1d565b602082019050919050565b5f6020820190508181035f830152613a7e81613a45565b9050919050565b7f4e4f545f46524f4d5f5a45524f414444524553530000000000000000000000005f82015250565b5f613ab9601483612f0e565b9150613ac482613a85565b602082019050919050565b5f6020820190508181035f830152613ae681613aad565b9050919050565b7f554e415554484f52495a45445f4255524e0000000000000000000000000000005f82015250565b5f613b21601183612f0e565b9150613b2c82613aed565b602082019050919050565b5f6020820190508181035f830152613b4e81613b15565b9050919050565b5f819050919050565b5f613b6882613b55565b9150613b7383613b55565b9250828202613b8181613b55565b91507f800000000000000000000000000000000000000000000000000000000000000084145f84121615613bb857613bb761390e565b5b8282058414831517613bcd57613bcc61390e565b5b5092915050565b5f613bde82613b55565b9150613be983613b55565b92508282019050828112155f8312168382125f841215161715613c0f57613c0e61390e565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f613c4c82613b55565b9150613c5783613b55565b925082613c6757613c66613c15565b5b60015f0383147f800000000000000000000000000000000000000000000000000000000000000083141615613c9f57613c9e61390e565b5b828205905092915050565b5f613cb482612fae565b9150613cbf83612fae565b925082613ccf57613cce613c15565b5b828206905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680613d1e57607f821691505b602082108103613d3157613d30613cda565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302613d937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613d58565b613d9d8683613d58565b95508019841693508086168417925050509392505050565b5f819050919050565b5f613dd8613dd3613dce84612fae565b613db5565b612fae565b9050919050565b5f819050919050565b613df183613dbe565b613e05613dfd82613ddf565b848454613d64565b825550505050565b5f90565b613e19613e0d565b613e24818484613de8565b505050565b5b81811015613e4757613e3c5f82613e11565b600181019050613e2a565b5050565b601f821115613e8c57613e5d81613d37565b613e6684613d49565b81016020851015613e75578190505b613e89613e8185613d49565b830182613e29565b50505b505050565b5f82821c905092915050565b5f613eac5f1984600802613e91565b1980831691505092915050565b5f613ec48383613e9d565b9150826002028217905092915050565b613edd82612f04565b67ffffffffffffffff811115613ef657613ef56133c2565b5b613f008254613d07565b613f0b828285613e4b565b5f60209050601f831160018114613f3c575f8415613f2a578287015190505b613f348582613eb9565b865550613f9b565b601f198416613f4a86613d37565b5f5b82811015613f7157848901518255600182019150602085019450602081019050613f4c565b86831015613f8e5784890151613f8a601f891682613e9d565b8355505b6001600288020188555050505b505050505050565b5f81905092915050565b7f646174613a746578742f706c61696e2c7b226e616d65223a22546f6b656e20005f82015250565b5f613fe1601f83613fa3565b9150613fec82613fad565b601f82019050919050565b5f61400182612f04565b61400b8185613fa3565b935061401b818560208601612f1e565b80840191505092915050565b7f222c226465736372697074696f6e223a220000000000000000000000000000005f82015250565b5f61405b601183613fa3565b915061406682614027565b601182019050919050565b7f222c227374617465223a000000000000000000000000000000000000000000005f82015250565b5f6140a5600a83613fa3565b91506140b082614071565b600a82019050919050565b7f317d0000000000000000000000000000000000000000000000000000000000005f82015250565b5f6140ef600283613fa3565b91506140fa826140bb565b600282019050919050565b5f61410f82613fd5565b915061411b8286613ff7565b91506141268261404f565b91506141328285613ff7565b915061413d82614099565b91506141498284613ff7565b9150614154826140e3565b9150819050949350505050565b7f496e76616c69642073656e6465722061646472657373000000000000000000005f82015250565b5f614195601683612f0e565b91506141a082614161565b602082019050919050565b5f6020820190508181035f8301526141c281614189565b9050919050565b7f554e415554484f52495a45445f415050524f56455f464f525f414c4c000000005f82015250565b5f6141fd601c83612f0e565b9150614208826141c9565b602082019050919050565b5f6020820190508181035f83015261422a816141f1565b9050919050565b5f61423b82612fae565b915061424683612fae565b92508261425657614255613c15565b5b828204905092915050565b7f4e4f545f544f5f5a45524f4144445245535300000000000000000000000000005f82015250565b5f614295601283612f0e565b91506142a082614261565b602082019050919050565b5f6020820190508181035f8301526142c281614289565b9050919050565b7f42415443485452414e5346455246524f4d5f4e4f545f4f574e455200000000005f82015250565b5f6142fd601b83612f0e565b9150614308826142c9565b602082019050919050565b5f6020820190508181035f83015261432a816142f1565b9050919050565b7f4e4f545f415554484f52495a45440000000000000000000000000000000000005f82015250565b5f614365600e83612f0e565b915061437082614331565b602082019050919050565b5f6020820190508181035f83015261439281614359565b9050919050565b5f6143a382612fae565b91506143ae83612fae565b92508282039050818111156143c6576143c561390e565b5b92915050565b7f4552433732315f42415443485f5452414e534645525f52454a454354454400005f82015250565b5f614400601e83612f0e565b915061440b826143cc565b602082019050919050565b5f6020820190508181035f83015261442d816143f4565b9050919050565b7f434845434b5452414e534645525f4e4f545f4f574e45520000000000000000005f82015250565b5f614468601783612f0e565b915061447382614434565b602082019050919050565b5f6020820190508181035f8301526144958161445c565b9050919050565b7f554e415554484f52495a45445f5452414e5346455200000000000000000000005f82015250565b5f6144d0601583612f0e565b91506144db8261449c565b602082019050919050565b5f6020820190508181035f8301526144fd816144c4565b9050919050565b5f61450e82612fae565b91505f82036145205761451f61390e565b5b600182039050919050565b61453481612e51565b82525050565b5f60208201905061454d5f83018461452b565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52600160045260245ffd5b5f81519050919050565b5f82825260208201905092915050565b5f6145a482614580565b6145ae818561458a565b93506145be818560208601612f1e565b6145c781612f46565b840191505092915050565b5f6080820190506145e55f83018761303c565b6145f2602083018661303c565b6145ff60408301856132de565b8181036060830152614611818461459a565b905095945050505050565b5f8151905061462a81612e7c565b92915050565b5f6020828403121561464557614644612e49565b5b5f6146528482850161461c565b91505092915050565b7f4e4f545f4f574e455200000000000000000000000000000000000000000000005f82015250565b5f61468f600983612f0e565b915061469a8261465b565b602082019050919050565b5f6020820190508181035f8301526146bc81614683565b9050919050565b7f414c52454144595f4d494e5445440000000000000000000000000000000000005f82015250565b5f6146f7600e83612f0e565b9150614702826146c3565b602082019050919050565b5f6020820190508181035f830152614724816146eb565b9050919050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61475d81612fae565b82525050565b5f61476e8383614754565b60208301905092915050565b5f602082019050919050565b5f6147908261472b565b61479a8185614735565b93506147a583614745565b805f5b838110156147d55781516147bc8882614763565b97506147c78361477a565b9250506001810190506147a8565b5085935050505092915050565b5f6080820190506147f55f83018761303c565b614802602083018661303c565b81810360408301526148148185614786565b90508181036060830152614828818461459a565b90509594505050505056fea26469706673582212201379fcb52741d2562c023dcc84788859137f2d256573b6272841efa7c00fa10e64736f6c63430008140033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "id": "The id of the token.",
          "operator": "The address receiving the approval."
        }
      },
      "approveFor(address,address,uint256)": {
        "params": {
          "id": "The id of the token.",
          "operator": "The address receiving the approval.",
          "sender": "The address giving the approval."
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The address to look for."
        },
        "returns": {
          "_0": "The number of tokens owned by the address."
        }
      },
      "batchTransferFrom(address,address,uint256[],bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "ids": "The ids of the tokens.",
          "to": "The recipient of the token."
        }
      },
      "burn(uint256)": {
        "params": {
          "id": "The token which will be burnt."
        }
      },
      "burnFrom(address,uint256)": {
        "params": {
          "from": "address whose token is to be burnt.",
          "id": "The token which will be burnt."
        }
      },
      "constructor": {
        "details": "constructors",
        "params": {
          "initialPrefix": "the prefix that will be prepended to every user message goig forward"
        }
      },
      "getApproved(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "_0": "The address of the operator."
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "The address of the operator.",
          "owner": "The address of the owner."
        },
        "returns": {
          "isOperator": "The status of the approval."
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "owner": "The address of the token owner."
        }
      },
      "postUpgrade(string)": {
        "details": "called by the admin when the contract is deployed as a proxy",
        "params": {
          "initialPrefix": "the prefix that will be prepended to every user message goig forward"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "ids": "The ids of the tokens.",
          "to": "The recipient of the token."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "The send of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "The determination of the approval.",
          "operator": "The address receiving the approval."
        }
      },
      "setApprovalForAllFor(address,address,bool)": {
        "params": {
          "approved": "The determination of the approval.",
          "operator": "The address receiving the approval.",
          "sender": "The address giving the approval."
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "id": "The id of the interface."
        },
        "returns": {
          "_0": "Whether the interface is supported."
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "The sender of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      }
    },
    "version": 1
  },
  "evm": {
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "3707400",
        "executionCost": "infinite",
        "totalCost": "infinite"
      },
      "external": {
        "approve(address,uint256)": "infinite",
        "approveFor(address,address,uint256)": "infinite",
        "balanceOf(address)": "2887",
        "batchTransferFrom(address,address,uint256[],bytes)": "infinite",
        "burn(uint256)": "infinite",
        "burnFrom(address,uint256)": "infinite",
        "getApproved(uint256)": "infinite",
        "initneural(uint256,uint256)": "infinite",
        "isApprovedForAll(address,address)": "infinite",
        "mint(uint256)": "infinite",
        "name()": "infinite",
        "ownerOf(uint256)": "3172",
        "postUpgrade(string)": "infinite",
        "safeBatchTransferFrom(address,address,uint256[],bytes)": "infinite",
        "safeTransferFrom(address,address,uint256)": "infinite",
        "safeTransferFrom(address,address,uint256,bytes)": "infinite",
        "setApprovalForAll(address,bool)": "infinite",
        "setApprovalForAllFor(address,address,bool)": "infinite",
        "supportsInterface(bytes4)": "736",
        "symbol()": "infinite",
        "test(uint256,uint256)": "infinite",
        "tokenURI(uint256)": "infinite",
        "trainer(uint256,uint256,uint256)": "infinite",
        "transferFrom(address,address,uint256)": "infinite"
      },
      "internal": {
        "uint2str(uint256)": "infinite"
      }
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"initialPrefix\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approveFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numbneuro\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"astatembly\",\"type\":\"uint256\"}],\"name\":\"initneural\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"initialPrefix\",\"type\":\"string\"}],\"name\":\"postUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAllFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"id\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numbneuro\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"astatembly\",\"type\":\"uint256\"}],\"name\":\"test\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numbneuro\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"astatembly\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pat2\",\"type\":\"uint256\"}],\"name\":\"trainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"id\":\"The id of the token.\",\"operator\":\"The address receiving the approval.\"}},\"approveFor(address,address,uint256)\":{\"params\":{\"id\":\"The id of the token.\",\"operator\":\"The address receiving the approval.\",\"sender\":\"The address giving the approval.\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address to look for.\"},\"returns\":{\"_0\":\"The number of tokens owned by the address.\"}},\"batchTransferFrom(address,address,uint256[],bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"ids\":\"The ids of the tokens.\",\"to\":\"The recipient of the token.\"}},\"burn(uint256)\":{\"params\":{\"id\":\"The token which will be burnt.\"}},\"burnFrom(address,uint256)\":{\"params\":{\"from\":\"address whose token is to be burnt.\",\"id\":\"The token which will be burnt.\"}},\"constructor\":{\"details\":\"constructors\",\"params\":{\"initialPrefix\":\"the prefix that will be prepended to every user message goig forward\"}},\"getApproved(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"_0\":\"The address of the operator.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address of the operator.\",\"owner\":\"The address of the owner.\"},\"returns\":{\"isOperator\":\"The status of the approval.\"}},\"ownerOf(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"owner\":\"The address of the token owner.\"}},\"postUpgrade(string)\":{\"details\":\"called by the admin when the contract is deployed as a proxy\",\"params\":{\"initialPrefix\":\"the prefix that will be prepended to every user message goig forward\"}},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"ids\":\"The ids of the tokens.\",\"to\":\"The recipient of the token.\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The send of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"The determination of the approval.\",\"operator\":\"The address receiving the approval.\"}},\"setApprovalForAllFor(address,address,bool)\":{\"params\":{\"approved\":\"The determination of the approval.\",\"operator\":\"The address receiving the approval.\",\"sender\":\"The address giving the approval.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"id\":\"The id of the interface.\"},\"returns\":{\"_0\":\"Whether the interface is supported.\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The sender of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the senders behalf.\"},\"approveFor(address,address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the sender behalf.\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens owned by an address.\"},\"batchTransferFrom(address,address,uint256[],bytes)\":{\"notice\":\"Transfer many tokens between 2 addresses.\"},\"burn(uint256)\":{\"notice\":\"Burns token `id`.\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burn token`id` from `from`.\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved operator for a specific token.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Check if the sender approved the operator.\"},\"ownerOf(uint256)\":{\"notice\":\"Get the owner of a token.\"},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"notice\":\"Transfer many tokens between 2 addresses, while ensuring the receiving contract has a receiver method.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver know of the transfer.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver knows of the transfer.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender.\"},\"setApprovalForAllFor(address,address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check if the contract supports an interface. 0x01ffc9a7 is ERC-165. 0x80ac58cd is ERC-721 0x5b5e139f is ERC-721 Metadata (tokenURI, symbol, name)\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Neuro721.sol\":\"Neuro721\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"solidity-proxy/src/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaceeafeeaf0d200ca3942d8bf14c1c4f787a77f79cc87c08bb668e65acdee29\",\"license\":\"MIT\"},\"src/ERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity  ^0.8.13;\\n\\n// from https://github.com/thesandboxgame/sandbox-smart-contracts/blob/87de31e72d1d45c9df0cd3984aa2fcc793c51213/src/solc_0.7/common/BaseWithStorage/ERC721BaseToken.sol\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5e8bf644.\\ninterface IERC721MandatoryTokenReceiver {\\n    function onERC721BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x4b808c46\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x150b7a02\\n\\n    // needs to implements EIP-165\\n    // function supportsInterface(bytes4 interfaceId)\\n    //     external\\n    //     view\\n    //     returns (bool);\\n}\\n\\ncontract ERC721Base is IERC721 {\\n    using Address for address;\\n\\n    bytes4 internal constant _ERC721_RECEIVED = 0x150b7a02;\\n    bytes4 internal constant _ERC721_BATCH_RECEIVED = 0x4b808c46;\\n\\n    bytes4 internal constant ERC165ID = 0x01ffc9a7;\\n    bytes4 internal constant ERC721_MANDATORY_RECEIVER = 0x5e8bf644;\\n\\n    uint256 internal constant NOT_ADDRESS = 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000;\\n    uint256 internal constant OPERATOR_FLAG = (2**255);\\n    uint256 internal constant NOT_OPERATOR_FLAG = OPERATOR_FLAG - 1;\\n    uint256 internal constant BURNED_FLAG = (2**160);\\n\\n    mapping(address => uint256) internal _numNFTPerAddress;\\n    mapping(uint256 => uint256) internal _owners;\\n    mapping(address => mapping(address => bool)) internal _operatorsForAll;\\n    mapping(uint256 => address) internal _operators;\\n\\n    /// @notice Approve an operator to spend tokens on the senders behalf.\\n    /// @param operator The address receiving the approval.\\n    /// @param id The id of the token.\\n    function approve(address operator, uint256 id) external override {\\n        uint256 ownerData = _owners[_storageId(id)];\\n        address owner = address(uint160(ownerData));\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(owner == msg.sender || _operatorsForAll[owner][msg.sender], \\\"UNAUTHORIZED_APPROVAL\\\");\\n        _approveFor(ownerData, operator, id);\\n    }\\n\\n    /// @notice Approve an operator to spend tokens on the sender behalf.\\n    /// @param sender The address giving the approval.\\n    /// @param operator The address receiving the approval.\\n    /// @param id The id of the token.\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) external {\\n        uint256 ownerData = _owners[_storageId(id)];\\n        require(sender != address(0), \\\"ZERO_ADDRESS_SENDER\\\");\\n        require(msg.sender == sender || _operatorsForAll[sender][msg.sender], \\\"UNAUTHORIZED_APPROVAL\\\");\\n        require(address(uint160(ownerData)) == sender, \\\"OWNER_NOT_SENDER\\\");\\n        _approveFor(ownerData, operator, id);\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external override {\\n        _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            require(_checkOnERC721Received(msg.sender, from, to, id, \\\"\\\"), \\\"ERC721_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver know of the transfer.\\n    /// @param from The send of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external override {\\n        safeTransferFrom(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @notice Transfer many tokens between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external {\\n        _batchTransferFrom(from, to, ids, data, false);\\n    }\\n\\n    /// @notice Transfer many tokens between 2 addresses, while\\n    /// ensuring the receiving contract has a receiver method.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external {\\n        _batchTransferFrom(from, to, ids, data, true);\\n    }\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\\n    /// @param sender The address giving the approval.\\n    /// @param operator The address receiving the approval.\\n    /// @param approved The determination of the approval.\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external {\\n        require(sender != address(0), \\\"Invalid sender address\\\");\\n        require(msg.sender == sender, \\\"UNAUTHORIZED_APPROVE_FOR_ALL\\\");\\n\\n        _setApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\\n    /// @param operator The address receiving the approval.\\n    /// @param approved The determination of the approval.\\n    function setApprovalForAll(address operator, bool approved) external override {\\n        _setApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /// @notice Burns token `id`.\\n    /// @param id The token which will be burnt.\\n    function burn(uint256 id) external virtual {\\n        _burn(msg.sender, _ownerOf(id), id);\\n    }\\n\\n    /// @notice Burn token`id` from `from`.\\n    /// @param from address whose token is to be burnt.\\n    /// @param id The token which will be burnt.\\n    function burnFrom(address from, uint256 id) external virtual {\\n        require(from != address(0), \\\"NOT_FROM_ZEROADDRESS\\\");\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(\\n            msg.sender == from ||\\n                (operatorEnabled && _operators[id] == msg.sender) ||\\n                _operatorsForAll[from][msg.sender],\\n            \\\"UNAUTHORIZED_BURN\\\"\\n        );\\n        _burn(from, owner, id);\\n    }\\n\\n    /// @notice Get the number of tokens owned by an address.\\n    /// @param owner The address to look for.\\n    /// @return The number of tokens owned by the address.\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        require(owner != address(0), \\\"ZERO_ADDRESS_OWNER\\\");\\n        return _numNFTPerAddress[owner];\\n    }\\n\\n    /// @notice Get the owner of a token.\\n    /// @param id The id of the token.\\n    /// @return owner The address of the token owner.\\n    function ownerOf(uint256 id) external view override returns (address owner) {\\n        owner = _ownerOf(id);\\n        require(owner != address(0), \\\"NONEXISTANT_TOKEN\\\");\\n    }\\n\\n    /// @notice Get the approved operator for a specific token.\\n    /// @param id The id of the token.\\n    /// @return The address of the operator.\\n    function getApproved(uint256 id) external view override returns (address) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        if (operatorEnabled) {\\n            return _operators[id];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Check if the sender approved the operator.\\n    /// @param owner The address of the owner.\\n    /// @param operator The address of the operator.\\n    /// @return isOperator The status of the approval.\\n    function isApprovedForAll(address owner, address operator) external view override returns (bool isOperator) {\\n        return _operatorsForAll[owner][operator];\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver knows of the transfer.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    /// @param data Additional data.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public override {\\n        _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract()) {\\n            require(_checkOnERC721Received(msg.sender, from, to, id, data), \\\"ERC721_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @notice Check if the contract supports an interface.\\n    /// 0x01ffc9a7 is ERC-165.\\n    /// 0x80ac58cd is ERC-721\\n    /// @param id The id of the interface.\\n    /// @return Whether the interface is supported.\\n    function supportsInterface(bytes4 id) public pure virtual override returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd;\\n    }\\n\\n    /// @dev By overriding this function in an implementation which inherits this contract, you can enable versioned tokenIds without the extra overhead of writing to a new storage slot in _owners each time a version is incremented. See GameToken._storageId() for an example, where the storageId is the tokenId minus the version number.\\n    /// !!! Caution !!! Overriding this function without taking appropriate care could lead to\\n    /// ownerOf() returning an owner for non-existent tokens. Tests should be written to\\n    /// guard against introducing this bug.\\n    /// @param id The id of a token.\\n    /// @return The id used for storage mappings.\\n    function _storageId(uint256 id) internal view virtual returns (uint256) {\\n        return id;\\n    }\\n\\n    function _updateOwnerData(\\n        uint256 id,\\n        uint256 oldData,\\n        address newOwner,\\n        bool hasOperator\\n    ) internal virtual {\\n        if (hasOperator) {\\n            _owners[_storageId(id)] = (oldData & NOT_ADDRESS) | OPERATOR_FLAG | uint256(uint160(newOwner));\\n        } else {\\n            _owners[_storageId(id)] = ((oldData & NOT_ADDRESS) & NOT_OPERATOR_FLAG) | uint256(uint160(newOwner));\\n        }\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal {\\n        _numNFTPerAddress[from]--;\\n        _numNFTPerAddress[to]++;\\n        _updateOwnerData(id, _owners[_storageId(id)], to, false);\\n        emit Transfer(from, to, id);\\n    }\\n\\n    /// @dev See approveFor.\\n    function _approveFor(\\n        uint256 ownerData,\\n        address operator,\\n        uint256 id\\n    ) internal {\\n        address owner = address(uint160(ownerData));\\n        if (operator == address(0)) {\\n            _updateOwnerData(id, ownerData, owner, false);\\n        } else {\\n            _updateOwnerData(id, ownerData, owner, true);\\n            _operators[id] = operator;\\n        }\\n        emit Approval(owner, operator, id);\\n    }\\n\\n    /// @dev See batchTransferFrom.\\n    function _batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        bytes memory data,\\n        bool safe\\n    ) internal {\\n        bool authorized = msg.sender == from || _operatorsForAll[from][msg.sender];\\n\\n        require(from != address(0), \\\"NOT_FROM_ZEROADDRESS\\\");\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n\\n        uint256 numTokens = ids.length;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            uint256 id = ids[i];\\n            (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n            require(owner == from, \\\"BATCHTRANSFERFROM_NOT_OWNER\\\");\\n            require(authorized || (operatorEnabled && _operators[id] == msg.sender), \\\"NOT_AUTHORIZED\\\");\\n            _updateOwnerData(id, _owners[_storageId(id)], to, false);\\n            emit Transfer(from, to, id);\\n        }\\n        if (from != to) {\\n            _numNFTPerAddress[from] -= numTokens;\\n            _numNFTPerAddress[to] += numTokens;\\n        }\\n\\n        if (to.isContract() && (safe || _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER))) {\\n            require(_checkOnERC721BatchReceived(msg.sender, from, to, ids, data), \\\"ERC721_BATCH_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @dev See setApprovalForAll.\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        _operatorsForAll[sender][operator] = approved;\\n\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    function _mint(address owner, uint256 id) internal {\\n        uint256 storageId = _storageId(id);\\n        require(_owners[storageId] == 0, \\\"ALREADY_MINTED\\\");\\n        _owners[storageId] = uint256(uint160(owner));\\n        _numNFTPerAddress[owner]++;\\n        emit Transfer(address(0), owner, id);\\n    }\\n\\n    /// @dev See burn.\\n    function _burn(\\n        address from,\\n        address owner,\\n        uint256 id\\n    ) internal {\\n        require(from == owner, \\\"NOT_OWNER\\\");\\n        uint256 storageId = _storageId(id);\\n        _owners[storageId] = (_owners[storageId] & NOT_OPERATOR_FLAG) | BURNED_FLAG; // record as non owner but keep track of last owner\\n        _numNFTPerAddress[from]--;\\n        emit Transfer(from, address(0), id);\\n    }\\n\\n    /// @dev Check if receiving contract accepts erc721 transfers.\\n    /// @param operator The address of the operator.\\n    /// @param from The from address, may be different from msg.sender.\\n    /// @param to The adddress we want to transfer to.\\n    /// @param tokenId The id of the token we would like to transfer.\\n    /// @param _data Any additional data to send with the transfer.\\n    /// @return Whether the expected value of 0x150b7a02 is returned.\\n    function _checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        bytes4 retval = IERC721Receiver(to).onERC721Received(operator, from, tokenId, _data);\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    /// @dev Check if receiving contract accepts erc721 batch transfers.\\n    /// @param operator The address of the operator.\\n    /// @param from The from address, may be different from msg.sender.\\n    /// @param to The adddress we want to transfer to.\\n    /// @param ids The ids of the tokens we would like to transfer.\\n    /// @param _data Any additional data to send with the transfer.\\n    /// @return Whether the expected value of 0x4b808c46 is returned.\\n    function _checkOnERC721BatchReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        bytes4 retval = IERC721MandatoryTokenReceiver(to).onERC721BatchReceived(operator, from, ids, _data);\\n        return (retval == _ERC721_BATCH_RECEIVED);\\n    }\\n\\n    /// @dev See ownerOf\\n    function _ownerOf(uint256 id) internal view virtual returns (address) {\\n        uint256 data = _owners[_storageId(id)];\\n        if ((data & BURNED_FLAG) == BURNED_FLAG) {\\n            return address(0);\\n        }\\n        return address(uint160(data));\\n    }\\n\\n    /// @dev Get the owner and operatorEnabled status of a token.\\n    /// @param id The token to query.\\n    /// @return owner The owner of the token.\\n    /// @return operatorEnabled Whether or not operators are enabled for this token.\\n    function _ownerAndOperatorEnabledOf(uint256 id) internal view returns (address owner, bool operatorEnabled) {\\n        uint256 data = _owners[_storageId(id)];\\n        if ((data & BURNED_FLAG) == BURNED_FLAG) {\\n            owner = address(0);\\n        } else {\\n            owner = address(uint160(data));\\n        }\\n        operatorEnabled = (data / OPERATOR_FLAG) == 1;\\n    }\\n\\n    /// @dev Check whether a transfer is a meta Transaction or not.\\n    /// @param from The address who initiated the transfer (may differ from msg.sender).\\n    /// @param to The address recieving the token.\\n    /// @param id The token being transferred.\\n    function _checkTransfer(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal view {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(owner == from, \\\"CHECKTRANSFER_NOT_OWNER\\\");\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n        if (msg.sender != from) {\\n            require(\\n                _operatorsForAll[from][msg.sender] || (operatorEnabled && _operators[id] == msg.sender),\\n                \\\"UNAUTHORIZED_TRANSFER\\\"\\n            );\\n        }\\n    }\\n\\n    /// @dev Check if there was enough gas.\\n    /// @param _contract The address of the contract to check.\\n    /// @param interfaceId The id of the interface we want to test.\\n    /// @return Whether or not this check succeeded.\\n    function _checkInterfaceWith10000Gas(address _contract, bytes4 interfaceId) internal view returns (bool) {\\n        bool success;\\n        bool result;\\n        bytes memory callData = abi.encodeWithSelector(ERC165ID, interfaceId);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let call_ptr := add(0x20, callData)\\n            let call_size := mload(callData)\\n            let output := mload(0x40) // Find empty storage location using \\\"free memory pointer\\\"\\n            mstore(output, 0x0)\\n            success := staticcall(10000, _contract, call_ptr, call_size, output, 0x20) // 32 bytes\\n            result := mload(output)\\n        }\\n        // (10000 / 63) \\\"not enough for supportsInterface(...)\\\" // consume all gas, so caller can potentially know that there was not enough gas\\n        assert(gasleft() > 158);\\n        return success && result;\\n    }\\n}\\n\",\"keccak256\":\"0xc5593fd52b0cb3b698045dc2936ae83e527e5340958bb5d0544f95d36f9a1fe5\",\"license\":\"AGPL-1.0\"},\"src/Neuro721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./ERC721Base.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\nimport 'solidity-proxy/src/Proxied.sol';\\n\\ncontract Neuro721 is ERC721Base, Proxied { \\n    uint256 _lastId;\\n    string internal _prefix;\\n\\n    mapping(uint256 => int256[]) neuralState;    \\n  \\n    mapping (uint256 => mapping (uint256  => int256)) w;\\n    /// @dev constructors\\n\\t/// @param initialPrefix the prefix that will be prepended to every user message goig forward\\n\\tconstructor(string memory initialPrefix) {\\n\\t\\t// the proxied modifier from `hardhat-deploy` (see `postUpgrade` function)\\n\\t\\t//  ensure postUpgrade effect can only be used once when the contract is deployed without proxy.\\n\\t\\t//  by calling that function in the constructor\\n\\t\\t//  we ensure the contract behave the same whether it is deployed through a proxy or not.\\n\\t\\t//  when the contract is deployed without proxy, the postUpgrade can never be called\\n\\t\\tpostUpgrade(initialPrefix);\\n\\t}\\n\\n\\t//\\n\\t/// @dev called by the admin when the contract is deployed as a proxy\\n\\t/// @param initialPrefix the prefix that will be prepended to every user message goig forward\\n\\tfunction postUpgrade(string memory initialPrefix) public proxied {\\n\\t\\t_prefix = initialPrefix;\\n\\t}\\n\\n    function trainer(uint256 numbneuro, uint256 astatembly,uint256 pat2) external {\\n        //parse base on numbneuro\\n        int256[25]  memory tempo; \\n        int256[25]  memory tempo2; \\n        for (uint256 i = 0; i < numbneuro; i++) {\\n            uint256 tpo=(astatembly >> i) & 1;\\n            int256 pm=-1;\\n            if(tpo==1){\\n                pm=1;\\n            }\\n            tempo[i]=pm;\\n            tpo=(pat2 >> i) & 1;\\n            if(tpo==1){\\n               tempo2[i]=1;\\n            }\\n            else{\\n                tempo2[i]=-1;\\n            }\\n\\n        }\\n        int256 wijk=10;\\n        int256 loc=0;\\n        for (uint256 k = 0; k <2; k++) {\\n        for (uint256 i = 0; i < numbneuro; i++) {\\n            loc=0;\\n            for (uint256 j = i+1; j < numbneuro; j++) {\\n                if(i==j){continue;}\\n                w[i][j]=((tempo[i]*tempo[j])+(tempo2[i]*tempo2[j]))/2;\\n                w[j][i]=w[i][j];         \\n            }      \\n            for (uint256 j = 0; j < numbneuro; j++) {\\n                if(i==j){continue;}\\n                loc+=(w[i][j]*neuralState[i+1][0]);\\n            }\\n            if(loc<0){\\n                neuralState[i+1][0]=-1*neuralState[i+1][0];\\n            }\\n        }\\n        }  \\n    }\\n\\n    function test(uint256 numbneuro, uint256 astatembly) external {\\n\\n        int256[25]  memory tempo; \\n\\n         int256 loc=0;\\n        for (uint256 i = 0; i < numbneuro; i++) {\\n            uint256 tpo=(astatembly >> i) & 1;\\n            int256 pm=-1;\\n            if(tpo==1){\\n                pm=1;\\n            }\\n            tempo[i]=pm;\\n        }\\n        for (uint256 k = 0; k <1; k++) {\\n        for (uint256 i = 0; i < numbneuro; i++) {\\n            loc=0;\\n            for (uint256 j = 0; j < numbneuro; j++) {\\n                if(i==j){continue;}\\n                loc+=(w[i][j]*tempo[i]);\\n            }\\n            if(loc<0){\\n                tempo[i]=-1*tempo[i];\\n            }\\n        }\\n        }\\n        for (uint256 i = 0; i < numbneuro; i++) {\\n            neuralState[i+1][0]=tempo[i];\\n        }\\n\\n    }\\n\\n    function initneural(uint256 numbneuro, uint256 astatembly) external {\\n\\n        int256[25]  memory tempo; \\n\\n\\n        for (uint256 i = 0; i < numbneuro; i++) {\\n            uint256 tpo=(astatembly >> i) & 1;\\n            int256 pm=-1;\\n            if(tpo==1){\\n                pm=1;\\n            }\\n            tempo[i]=pm;\\n   \\n            \\n            neuralState[i+1][0]=pm; \\n        }\\n\\n    }\\n\\n    function uint2str(uint256 num) private pure returns (string memory _uintAsString) {\\n        unchecked {\\n            if (num == 0) {\\n                return \\\"0\\\";\\n            }\\n\\n            uint256 j = num;\\n            uint256 len;\\n            while (j != 0) {\\n                len++;\\n                j /= 10;\\n            }\\n\\n            bytes memory bstr = new bytes(len);\\n            uint256 k = len - 1;\\n            while (num != 0) {\\n                bstr[k--] = bytes1(uint8(48 + (num % 10)));\\n                num /= 10;\\n            }\\n\\n            return string(bstr);\\n        }\\n    }\\n\\n    \\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\\n        string memory tokenIdStr = uint2str(tokenId);\\n        // uint256 abs;\\n        // int256 sign;\\n        // string memory signstr =\\\"\\\";\\n        // bytes memory negate=new bytes(1);    \\n        // negate[0]= bytes1(uint8(45));\\n        // if(neuralState[tokenId][0]<0){\\n        //     sign=-1;\\n        //     abs=uint256(neuralState[tokenId][0]*sign);\\n        //     signstr=string(negate);\\n        // }\\n        // else{\\n        //     abs=uint256(neuralState[tokenId][0]);\\n        // }\\n        //string memory nSTR= string.concat(signstr,uint2str(abs) );\\n        bytes memory negate=new bytes(1);    \\n        negate[0]= bytes1(uint8(45));\\n        string memory nSTR=\\\"\\\";\\n        if(neuralState[tokenId][0]<0){\\n            nSTR= string(negate);\\n        }\\n \\n        return\\n            string(\\n                abi.encodePacked(\\n                    // solhint-disable quotes\\n                    'data:text/plain,{\\\"name\\\":\\\"Token ',\\n                    tokenIdStr,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    tokenIdStr,\\n                    '\\\",\\\"state\\\":',nSTR,'1}'\\n                )        \\n            );\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return \\\"Hfn\\\";\\n    }\\n\\n    function name() external pure returns (string memory) {\\n        return \\\"Hopfield\\\";\\n    }\\n\\n    /// @notice Check if the contract supports an interface.\\n    /// 0x01ffc9a7 is ERC-165.\\n    /// 0x80ac58cd is ERC-721\\n    /// 0x5b5e139f is ERC-721 Metadata (tokenURI, symbol, name)\\n    /// @param id The id of the interface.\\n    /// @return Whether the interface is supported.\\n    function supportsInterface(bytes4 id) public pure virtual override returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd || id == 0x5b5e139f;\\n    }\\n\\n    function mint(uint256 num) external {\\n        uint256 id = _lastId;\\n        for (uint256 i = 0; i < num; i++) {\\n            id++;\\n            _mint(msg.sender, id);\\n        }\\n        int256 l=-1;\\n        if(block.timestamp%2==0){\\n            l=1;\\n        }\\n        neuralState[id].push(l); \\n        _lastId = id;\\n    }\\n}\\n\",\"keccak256\":\"0xb302582f0f30b3984080ae8e7dac9b3e9ecd8364f479270af09ab6205efb2042\",\"license\":\"AGPL-1.0\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 715,
        "contract": "src/Neuro721.sol:Neuro721",
        "label": "_numNFTPerAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 719,
        "contract": "src/Neuro721.sol:Neuro721",
        "label": "_owners",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 725,
        "contract": "src/Neuro721.sol:Neuro721",
        "label": "_operatorsForAll",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 729,
        "contract": "src/Neuro721.sol:Neuro721",
        "label": "_operators",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1988,
        "contract": "src/Neuro721.sol:Neuro721",
        "label": "_lastId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1990,
        "contract": "src/Neuro721.sol:Neuro721",
        "label": "_prefix",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 1995,
        "contract": "src/Neuro721.sol:Neuro721",
        "label": "neuralState",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_array(t_int256)dyn_storage)"
      },
      {
        "astId": 2001,
        "contract": "src/Neuro721.sol:Neuro721",
        "label": "w",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_int256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_int256)dyn_storage": {
        "base": "t_int256",
        "encoding": "dynamic_array",
        "label": "int256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_int256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_int256)dyn_storage"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_int256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_int256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Approve an operator to spend tokens on the senders behalf."
      },
      "approveFor(address,address,uint256)": {
        "notice": "Approve an operator to spend tokens on the sender behalf."
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens owned by an address."
      },
      "batchTransferFrom(address,address,uint256[],bytes)": {
        "notice": "Transfer many tokens between 2 addresses."
      },
      "burn(uint256)": {
        "notice": "Burns token `id`."
      },
      "burnFrom(address,uint256)": {
        "notice": "Burn token`id` from `from`."
      },
      "getApproved(uint256)": {
        "notice": "Get the approved operator for a specific token."
      },
      "isApprovedForAll(address,address)": {
        "notice": "Check if the sender approved the operator."
      },
      "ownerOf(uint256)": {
        "notice": "Get the owner of a token."
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "notice": "Transfer many tokens between 2 addresses, while ensuring the receiving contract has a receiver method."
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses letting the receiver know of the transfer."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Transfer a token between 2 addresses letting the receiver knows of the transfer."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender."
      },
      "setApprovalForAllFor(address,address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender."
      },
      "supportsInterface(bytes4)": {
        "notice": "Check if the contract supports an interface. 0x01ffc9a7 is ERC-165. 0x80ac58cd is ERC-721 0x5b5e139f is ERC-721 Metadata (tokenURI, symbol, name)"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses."
      }
    },
    "version": 1
  },
  "argsData": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000",
  "nonce": "0xe",
  "txOrigin": "0x38b96257b53d2d33bbd4376fb3b732459f28a872"
}